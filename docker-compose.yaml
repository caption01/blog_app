version: "3"
services:
  front-app:
    build:
      context: ./front-app
      dockerfile: Dockerfile
    volumes:
      - /usr/app/node_modules
      - ./front-app:/usr/app
    ports:
      - "4001:3000"
    env_file:
      - ./front-app/.env.local
    command: >
      sh -c "npm run build &&
             npm run start"
    restart: always

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    volumes:
      - /usr/app/node_modules
      - ./server:/usr/app
    ports:
      - "4010:4000"
    restart: always

  postgres:
    image: postgres:12.1
    environment:
      POSTGRES_USER: root_user
      POSTGRES_PASSWORD: root_pass
      POSTGRES_DB: db_blog_app
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --version"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_blog_app:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:4.16
    environment:
      PGADMIN_DEFAULT_EMAIL: admin
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_LISTEN_PORT: 80
    volumes:
      - pgadmin_blog_app:/root/.pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped

  prisma:
    image: prismagraphql/prisma:1.34
    restart: always
    ports:
      - "4466:4466"
    depends_on:
      - postgres
    environment:
      PRISMA_CONFIG: |
        port: 4466
        # uncomment the next line and provide the env var PRISMA_MANAGEMENT_API_SECRET=my-secret to activate cluster security
        # managementApiSecret: my-secret
        databases:
          default:
            connector: postgres
            host: postgres
            database: db_blog_app
            user: root_user
            password: root_pass
            rawAccess: true
            port: 5432
            migrations: true

volumes:
  postgres_blog_app:
  pgadmin_blog_app:
